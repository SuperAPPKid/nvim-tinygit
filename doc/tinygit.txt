*tinygit.txt*           For NVIM v0.8.0           Last change: 2023 October 11

==============================================================================
Table of Contents                                  *tinygit-table-of-contents*

1. nvim-tinygit                                         |tinygit-nvim-tinygit|
  - Table of Contents                 |tinygit-nvim-tinygit-table-of-contents|
  - Features                                   |tinygit-nvim-tinygit-features|
  - Installation                           |tinygit-nvim-tinygit-installation|
  - Usage                                         |tinygit-nvim-tinygit-usage|
  - Configuration                         |tinygit-nvim-tinygit-configuration|
  - Non-Goals                                 |tinygit-nvim-tinygit-non-goals|
  - Credits                                     |tinygit-nvim-tinygit-credits|

==============================================================================
1. nvim-tinygit                                         *tinygit-nvim-tinygit*



Lightweight and nimble git client for nvim.



_Commit Message Input Field with Syntax Highlighting_



_Informative Notifications with Highlighting when using nvim-notify_


TABLE OF CONTENTS                     *tinygit-nvim-tinygit-table-of-contents*

- |tinygit-features|
- |tinygit-installation|
- |tinygit-usage|
    - |tinygit-smart-commit|
    - |tinygit-quick-amends|
    - |tinygit-github-interaction|
    - |tinygit-push|
    - |tinygit-search-file-history-("git-pickaxe")|
- |tinygit-configuration|
- |tinygit-non-goals|
- |tinygit-credits|


FEATURES                                       *tinygit-nvim-tinygit-features*

- Smart-Commit: Open a popup to enter a commit message. If there are no staged changed, stages all changes before doing so (`git add -A`).
- Option to automatically open references GitHub issues in the browser after committing.
- Commit Messages have syntax highlighting, indicators for commit message overlength <https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting>, and optionally enforce conventional commits keywords.
- Option to run `git push` in a non-blocking manner after committing.
- Quick amends.
- Search issues & PRs. Open the selected issue or PR in the browser.
- Open the GitHub URL of the current file or selection.
- Search the history of the current file ("git pickaxe").


INSTALLATION                               *tinygit-nvim-tinygit-installation*

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-tinygit",
        dependencies = {
            "stevearc/dressing.nvim",
            "rcarriga/nvim-notify", -- optional, but recommended
        },
    },
    
    -- packer
    use {
        "chrisgrieser/nvim-tinygit",
        requires = {
            "stevearc/dressing.nvim",
            "rcarriga/nvim-notify", -- optional, but recommended
        },
    }
<

Optionally, install the Treesitter parser for git commits for some syntax
highlighting of your commit messages like emphasized conventional commit
keywords: `TSInstall gitcommit`


USAGE                                             *tinygit-nvim-tinygit-usage*


SMART-COMMIT ~

- Open a commit popup. If there are no staged changes, stage all changes (`git add -A`) before the commit.
- Right now, only supports the commit subject line. Optionally runs `git push` afterward or opens references issues in the browser.
- To use vim commands in the input field, set dressing.nvim’s `insert_only` to `false`.

>lua
    -- options default to `false`
    require("tinygit").smartCommit { push = false, openReferencedIssue = false }
<

**Example Workflow** Assuming these keybindings:

>lua
    vim.keymap.set("n", "ga", "<cmd>Gitsigns add_hunk<CR>") -- gitsigns.nvim
    vim.keymap.set("n", "gc", function() require("tinygit").smartCommit() end)
    vim.keymap.set("n", "gp", function() require("tinygit").push() end)
<

1. Stage some hunks (changes) via `ga`.
2. Use `gc` to enter a commit message.
3. Repeat 1 and 2.
4. When done, `gp` to push the commits.


QUICK AMENDS ~

- `amendOnlyMsg` just opens the commit popup to change the last commit message, and does not stage any changes.
- `amendNoEdit` keeps the last commit message; if there are no staged changes, it stages all changes (`git add -A`).
- Optionally runs `git push --force` afterward (only recommended for single-person repos).

>lua
    -- options default to `false`
    require("tinygit").amendOnlyMsg { forcePush = false }
    require("tinygit").amendNoEdit { forcePush = false }
<


GITHUB INTERACTION ~

- Search issues & PRs. Requires `curl`.
- The appearance of the selector is controlled by `dressing.nvim`. (You can configure `dressing` to use `telescope`.)

>lua
    -- state: all|closed|open (default: all)
    -- type: all|issue|pr (default: all)
    require("tinygit").issuesAndPrs { type = "all", state = "all" }
<

- Open the current file at GitHub in the browser and copy the URL to the system clipboard.
- Normal mode: open the current file or repo.
- Visual mode: open the current selection.

>lua
    -- file|repo (default: file)
    require("tinygit").githubUrl("file")
<


PUSH ~

>lua
    -- options default to `false`
    require("tinygit").push { pullBefore = false, force = false }
<


SEARCH FILE HISTORY (“GIT PICKAXE”) ~

- Search the git history of the current file for a term ("git pickaxe").
- The search is case-insensitive and supports regex.
- Select from the matching commits to open a diff popup.
- Use `n`/`N` in the popup to go to the next/previous occurrence of the query.
- Use `<Tab>`/`<S-Tab>` to cycle through the commits.

>lua
    require("tinygit").searchFileHistory()
<


CONFIGURATION                             *tinygit-nvim-tinygit-configuration*

The `setup` call is optional. These are the default settings:

>lua
    local defaultConfig = {
        commitMsg = {
            -- Why 50/72 is recommended: https://stackoverflow.com/q/2290016/22114136
            mediumLen = 50,
            maxLen = 72,
    
            -- When conforming the commit message popup with an empty message, fill
            -- in this message. `false` to disallow empty commit messages.
            emptyFillIn = "chore", ---@type string|false
    
            -- disallow commit messages without a conventinal commit keyword
            enforceConvCommits = {
                enabled = true,
                -- stylua: ignore
                keywords = {
                    "chore", "build", "test", "fix", "feat", "refactor", "perf",
                    "style", "revert", "ci", "docs", "break", "improv",
                },
            },
        },
        asyncOpConfirmationSound = true, -- currently macOS only
        issueIcons = {
            closedIssue = "🟣",
            openIssue = "🟢",
            openPR = "🟦",
            mergedPR = "🟨",
            closedPR = "🟥",
        },
    }
<


  [!NOTE] To change the appearance and behavior of the commit message input
  field, you need to configure dressing.nvim
  <https://github.com/stevearc/dressing.nvim>.

NON-GOALS                                     *tinygit-nvim-tinygit-non-goals*

- Become a full-fledged git client. Use neogit <https://github.com/NeogitOrg/neogit> for that.
- Add features available in gitsigns.nvim <https://github.com/lewis6991/gitsigns.nvim>. `tinygit` is intended to complement `gitsigns.nvim` with some simple commands, not replace it.
- UI Customization. Configure dressing.nvim <https://github.com/stevearc/dressing.nvim> for that.


CREDITS                                         *tinygit-nvim-tinygit-credits*

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Blog** I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

**Profiles** - reddit <https://www.reddit.com/user/pseudometapseudo> - Discord
<https://discordapp.com/users/462774483044794368/> - Academic Website
<https://chris-grieser.de/> - Twitter <https://twitter.com/pseudo_meta> -
Mastodon <https://pkm.social/@pseudometa> - ResearchGate
<https://www.researchgate.net/profile/Christopher-Grieser> - LinkedIn
<https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

**Buy Me a Coffee**

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
